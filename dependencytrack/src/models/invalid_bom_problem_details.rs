/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// InvalidBomProblemDetails : An RFC 9457 problem object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvalidBomProblemDetails {
    /// A URI reference that identifies the problem type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// HTTP status code generated by the origin server for this occurrence of the problem
    #[serde(rename = "status")]
    pub status: i32,
    /// Short, human-readable summary of the problem type
    #[serde(rename = "title")]
    pub title: String,
    /// Human-readable explanation specific to this occurrence of the problem
    #[serde(rename = "detail")]
    pub detail: String,
    /// Reference URI that identifies the specific occurrence of the problem
    #[serde(rename = "instance", skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    /// Errors identified during schema validation
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<String>>,
}

impl InvalidBomProblemDetails {
    /// An RFC 9457 problem object
    pub fn new(status: i32, title: String, detail: String) -> InvalidBomProblemDetails {
        InvalidBomProblemDetails {
            r#type: None,
            status,
            title,
            detail,
            instance: None,
            errors: None,
        }
    }
}

