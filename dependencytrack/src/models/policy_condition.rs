/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyCondition {
    #[serde(rename = "policy", skip_serializing_if = "Option::is_none")]
    pub policy: Option<Box<models::Policy>>,
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<Operator>,
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<Subject>,
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
}

impl PolicyCondition {
    pub fn new(uuid: uuid::Uuid) -> PolicyCondition {
        PolicyCondition {
            policy: None,
            operator: None,
            subject: None,
            value: None,
            uuid,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operator {
    #[serde(rename = "IS")]
    Is,
    #[serde(rename = "IS_NOT")]
    IsNot,
    #[serde(rename = "MATCHES")]
    Matches,
    #[serde(rename = "NO_MATCH")]
    NoMatch,
    #[serde(rename = "NUMERIC_GREATER_THAN")]
    NumericGreaterThan,
    #[serde(rename = "NUMERIC_LESS_THAN")]
    NumericLessThan,
    #[serde(rename = "NUMERIC_EQUAL")]
    NumericEqual,
    #[serde(rename = "NUMERIC_NOT_EQUAL")]
    NumericNotEqual,
    #[serde(rename = "NUMERIC_GREATER_THAN_OR_EQUAL")]
    NumericGreaterThanOrEqual,
    #[serde(rename = "NUMERIC_LESSER_THAN_OR_EQUAL")]
    NumericLesserThanOrEqual,
    #[serde(rename = "CONTAINS_ALL")]
    ContainsAll,
    #[serde(rename = "CONTAINS_ANY")]
    ContainsAny,
}

impl Default for Operator {
    fn default() -> Operator {
        Self::Is
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Subject {
    #[serde(rename = "AGE")]
    Age,
    #[serde(rename = "COORDINATES")]
    Coordinates,
    #[serde(rename = "CPE")]
    Cpe,
    #[serde(rename = "LICENSE")]
    License,
    #[serde(rename = "LICENSE_GROUP")]
    LicenseGroup,
    #[serde(rename = "PACKAGE_URL")]
    PackageUrl,
    #[serde(rename = "SEVERITY")]
    Severity,
    #[serde(rename = "SWID_TAGID")]
    SwidTagid,
    #[serde(rename = "VERSION")]
    Version,
    #[serde(rename = "COMPONENT_HASH")]
    ComponentHash,
    #[serde(rename = "CWE")]
    Cwe,
    #[serde(rename = "VULNERABILITY_ID")]
    VulnerabilityId,
    #[serde(rename = "VERSION_DISTANCE")]
    VersionDistance,
}

impl Default for Subject {
    fn default() -> Subject {
        Self::Age
    }
}

