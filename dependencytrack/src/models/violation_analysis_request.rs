/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ViolationAnalysisRequest {
    #[serde(rename = "component")]
    pub component: String,
    #[serde(rename = "policyViolation")]
    pub policy_violation: String,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "analysisState", skip_serializing_if = "Option::is_none")]
    pub analysis_state: Option<AnalysisState>,
    #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
    pub suppressed: Option<bool>,
}

impl ViolationAnalysisRequest {
    pub fn new(component: String, policy_violation: String) -> ViolationAnalysisRequest {
        ViolationAnalysisRequest {
            component,
            policy_violation,
            comment: None,
            analysis_state: None,
            suppressed: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AnalysisState {
    #[serde(rename = "APPROVED")]
    Approved,
    #[serde(rename = "REJECTED")]
    Rejected,
    #[serde(rename = "NOT_SET")]
    NotSet,
}

impl Default for AnalysisState {
    fn default() -> AnalysisState {
        Self::Approved
    }
}

