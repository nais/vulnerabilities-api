/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Component {
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(rename = "publisher", skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[serde(rename = "supplier", skip_serializing_if = "Option::is_none")]
    pub supplier: Option<Box<models::OrganizationalEntity>>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "classifier", skip_serializing_if = "Option::is_none")]
    pub classifier: Option<Classifier>,
    #[serde(rename = "filename", skip_serializing_if = "Option::is_none")]
    pub filename: Option<String>,
    #[serde(rename = "extension", skip_serializing_if = "Option::is_none")]
    pub extension: Option<String>,
    #[serde(rename = "md5", skip_serializing_if = "Option::is_none")]
    pub md5: Option<String>,
    #[serde(rename = "sha1", skip_serializing_if = "Option::is_none")]
    pub sha1: Option<String>,
    #[serde(rename = "sha256", skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
    #[serde(rename = "sha384", skip_serializing_if = "Option::is_none")]
    pub sha384: Option<String>,
    #[serde(rename = "sha512", skip_serializing_if = "Option::is_none")]
    pub sha512: Option<String>,
    #[serde(rename = "sha3_256", skip_serializing_if = "Option::is_none")]
    pub sha3_256: Option<String>,
    #[serde(rename = "sha3_384", skip_serializing_if = "Option::is_none")]
    pub sha3_384: Option<String>,
    #[serde(rename = "sha3_512", skip_serializing_if = "Option::is_none")]
    pub sha3_512: Option<String>,
    #[serde(rename = "blake2b_256", skip_serializing_if = "Option::is_none")]
    pub blake2b_256: Option<String>,
    #[serde(rename = "blake2b_384", skip_serializing_if = "Option::is_none")]
    pub blake2b_384: Option<String>,
    #[serde(rename = "blake2b_512", skip_serializing_if = "Option::is_none")]
    pub blake2b_512: Option<String>,
    #[serde(rename = "blake3", skip_serializing_if = "Option::is_none")]
    pub blake3: Option<String>,
    #[serde(rename = "cpe", skip_serializing_if = "Option::is_none")]
    pub cpe: Option<String>,
    #[serde(rename = "purl", skip_serializing_if = "Option::is_none")]
    pub purl: Option<String>,
    #[serde(rename = "purlCoordinates", skip_serializing_if = "Option::is_none")]
    pub purl_coordinates: Option<String>,
    #[serde(rename = "swidTagId", skip_serializing_if = "Option::is_none")]
    pub swid_tag_id: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "copyright", skip_serializing_if = "Option::is_none")]
    pub copyright: Option<String>,
    #[serde(rename = "license", skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
    #[serde(rename = "licenseExpression", skip_serializing_if = "Option::is_none")]
    pub license_expression: Option<String>,
    #[serde(rename = "licenseUrl", skip_serializing_if = "Option::is_none")]
    pub license_url: Option<String>,
    #[serde(rename = "resolvedLicense", skip_serializing_if = "Option::is_none")]
    pub resolved_license: Option<Box<models::License>>,
    #[serde(rename = "directDependencies", skip_serializing_if = "Option::is_none")]
    pub direct_dependencies: Option<String>,
    #[serde(rename = "externalReferences", skip_serializing_if = "Option::is_none")]
    pub external_references: Option<Vec<models::ExternalReference>>,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Box<models::Component>>,
    #[serde(rename = "children", skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<models::Component>>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<models::ComponentProperty>>,
    #[serde(rename = "vulnerabilities", skip_serializing_if = "Option::is_none")]
    pub vulnerabilities: Option<Vec<models::Vulnerability>>,
    #[serde(rename = "project")]
    pub project: Box<models::Project>,
    #[serde(rename = "lastInheritedRiskScore", skip_serializing_if = "Option::is_none")]
    pub last_inherited_risk_score: Option<f64>,
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
    #[serde(rename = "metrics", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Box<models::DependencyMetrics>>,
    #[serde(rename = "repositoryMeta", skip_serializing_if = "Option::is_none")]
    pub repository_meta: Option<Box<models::RepositoryMetaComponent>>,
    #[serde(rename = "dependencyGraph", skip_serializing_if = "Option::is_none")]
    pub dependency_graph: Option<Vec<String>>,
    #[serde(rename = "expandDependencyGraph", skip_serializing_if = "Option::is_none")]
    pub expand_dependency_graph: Option<bool>,
    #[serde(rename = "isInternal", skip_serializing_if = "Option::is_none")]
    pub is_internal: Option<bool>,
}

impl Component {
    pub fn new(project: models::Project, uuid: uuid::Uuid) -> Component {
        Component {
            author: None,
            publisher: None,
            supplier: None,
            group: None,
            name: None,
            version: None,
            classifier: None,
            filename: None,
            extension: None,
            md5: None,
            sha1: None,
            sha256: None,
            sha384: None,
            sha512: None,
            sha3_256: None,
            sha3_384: None,
            sha3_512: None,
            blake2b_256: None,
            blake2b_384: None,
            blake2b_512: None,
            blake3: None,
            cpe: None,
            purl: None,
            purl_coordinates: None,
            swid_tag_id: None,
            description: None,
            copyright: None,
            license: None,
            license_expression: None,
            license_url: None,
            resolved_license: None,
            direct_dependencies: None,
            external_references: None,
            parent: None,
            children: None,
            properties: None,
            vulnerabilities: None,
            project: Box::new(project),
            last_inherited_risk_score: None,
            notes: None,
            uuid,
            metrics: None,
            repository_meta: None,
            dependency_graph: None,
            expand_dependency_graph: None,
            is_internal: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Classifier {
    #[serde(rename = "APPLICATION")]
    Application,
    #[serde(rename = "FRAMEWORK")]
    Framework,
    #[serde(rename = "LIBRARY")]
    Library,
    #[serde(rename = "CONTAINER")]
    Container,
    #[serde(rename = "OPERATING_SYSTEM")]
    OperatingSystem,
    #[serde(rename = "DEVICE")]
    Device,
    #[serde(rename = "FIRMWARE")]
    Firmware,
    #[serde(rename = "FILE")]
    File,
    #[serde(rename = "PLATFORM")]
    Platform,
    #[serde(rename = "DEVICE_DRIVER")]
    DeviceDriver,
    #[serde(rename = "MACHINE_LEARNING_MODEL")]
    MachineLearningModel,
    #[serde(rename = "DATA")]
    Data,
}

impl Default for Classifier {
    fn default() -> Classifier {
        Self::Application
    }
}

