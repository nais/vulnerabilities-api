/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Policy {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<Operator>,
    #[serde(rename = "violationState", skip_serializing_if = "Option::is_none")]
    pub violation_state: Option<ViolationState>,
    #[serde(rename = "policyConditions", skip_serializing_if = "Option::is_none")]
    pub policy_conditions: Option<Vec<models::PolicyCondition>>,
    #[serde(rename = "projects", skip_serializing_if = "Option::is_none")]
    pub projects: Option<Vec<models::Project>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<models::Tag>>,
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
    #[serde(rename = "includeChildren", skip_serializing_if = "Option::is_none")]
    pub include_children: Option<bool>,
    #[serde(rename = "global", skip_serializing_if = "Option::is_none")]
    pub global: Option<bool>,
}

impl Policy {
    pub fn new(uuid: uuid::Uuid) -> Policy {
        Policy {
            name: None,
            operator: None,
            violation_state: None,
            policy_conditions: None,
            projects: None,
            tags: None,
            uuid,
            include_children: None,
            global: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operator {
    #[serde(rename = "ALL")]
    All,
    #[serde(rename = "ANY")]
    Any,
}

impl Default for Operator {
    fn default() -> Operator {
        Self::All
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ViolationState {
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "FAIL")]
    Fail,
}

impl Default for ViolationState {
    fn default() -> ViolationState {
        Self::Info
    }
}

