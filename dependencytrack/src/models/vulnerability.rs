/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Vulnerability {
    #[serde(rename = "vulnId", skip_serializing_if = "Option::is_none")]
    pub vuln_id: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(rename = "friendlyVulnId", skip_serializing_if = "Option::is_none")]
    pub friendly_vuln_id: Option<String>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "subTitle", skip_serializing_if = "Option::is_none")]
    pub sub_title: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
    #[serde(rename = "recommendation", skip_serializing_if = "Option::is_none")]
    pub recommendation: Option<String>,
    #[serde(rename = "references", skip_serializing_if = "Option::is_none")]
    pub references: Option<String>,
    #[serde(rename = "credits", skip_serializing_if = "Option::is_none")]
    pub credits: Option<String>,
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    #[serde(rename = "published", skip_serializing_if = "Option::is_none")]
    pub published: Option<String>,
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    #[serde(rename = "cwes", skip_serializing_if = "Option::is_none")]
    pub cwes: Option<Vec<models::Cwe>>,
    #[serde(rename = "cvssV2BaseScore", skip_serializing_if = "Option::is_none")]
    pub cvss_v2_base_score: Option<f64>,
    #[serde(rename = "cvssV2ImpactSubScore", skip_serializing_if = "Option::is_none")]
    pub cvss_v2_impact_sub_score: Option<f64>,
    #[serde(rename = "cvssV2ExploitabilitySubScore", skip_serializing_if = "Option::is_none")]
    pub cvss_v2_exploitability_sub_score: Option<f64>,
    #[serde(rename = "cvssV2Vector", skip_serializing_if = "Option::is_none")]
    pub cvss_v2_vector: Option<String>,
    #[serde(rename = "cvssV3BaseScore", skip_serializing_if = "Option::is_none")]
    pub cvss_v3_base_score: Option<f64>,
    #[serde(rename = "cvssV3ImpactSubScore", skip_serializing_if = "Option::is_none")]
    pub cvss_v3_impact_sub_score: Option<f64>,
    #[serde(rename = "cvssV3ExploitabilitySubScore", skip_serializing_if = "Option::is_none")]
    pub cvss_v3_exploitability_sub_score: Option<f64>,
    #[serde(rename = "cvssV3Vector", skip_serializing_if = "Option::is_none")]
    pub cvss_v3_vector: Option<String>,
    #[serde(rename = "owaspRRLikelihoodScore", skip_serializing_if = "Option::is_none")]
    pub owasp_rr_likelihood_score: Option<f64>,
    #[serde(rename = "owaspRRTechnicalImpactScore", skip_serializing_if = "Option::is_none")]
    pub owasp_rr_technical_impact_score: Option<f64>,
    #[serde(rename = "owaspRRBusinessImpactScore", skip_serializing_if = "Option::is_none")]
    pub owasp_rr_business_impact_score: Option<f64>,
    #[serde(rename = "owaspRRVector", skip_serializing_if = "Option::is_none")]
    pub owasp_rr_vector: Option<String>,
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<Severity>,
    #[serde(rename = "vulnerableVersions", skip_serializing_if = "Option::is_none")]
    pub vulnerable_versions: Option<String>,
    #[serde(rename = "patchedVersions", skip_serializing_if = "Option::is_none")]
    pub patched_versions: Option<String>,
    #[serde(rename = "epssScore", skip_serializing_if = "Option::is_none")]
    pub epss_score: Option<f64>,
    #[serde(rename = "epssPercentile", skip_serializing_if = "Option::is_none")]
    pub epss_percentile: Option<f64>,
    #[serde(rename = "components", skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<models::Component>>,
    #[serde(rename = "serviceComponents", skip_serializing_if = "Option::is_none")]
    pub service_components: Option<Vec<models::ServiceComponent>>,
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
    #[serde(rename = "aliases", skip_serializing_if = "Option::is_none")]
    pub aliases: Option<Vec<models::VulnerabilityAlias>>,
    #[serde(rename = "findingAttribution", skip_serializing_if = "Option::is_none")]
    pub finding_attribution: Option<Box<models::FindingAttribution>>,
    #[serde(rename = "affectedProjectCount", skip_serializing_if = "Option::is_none")]
    pub affected_project_count: Option<i32>,
    #[serde(rename = "affectedActiveProjectCount", skip_serializing_if = "Option::is_none")]
    pub affected_active_project_count: Option<i32>,
    #[serde(rename = "affectedInactiveProjectCount", skip_serializing_if = "Option::is_none")]
    pub affected_inactive_project_count: Option<i32>,
    #[serde(rename = "affectedComponents", skip_serializing_if = "Option::is_none")]
    pub affected_components: Option<Vec<models::AffectedComponent>>,
    #[serde(rename = "cwe", skip_serializing_if = "Option::is_none")]
    pub cwe: Option<Box<models::Cwe>>,
}

impl Vulnerability {
    pub fn new(uuid: uuid::Uuid) -> Vulnerability {
        Vulnerability {
            vuln_id: None,
            source: None,
            friendly_vuln_id: None,
            title: None,
            sub_title: None,
            description: None,
            detail: None,
            recommendation: None,
            references: None,
            credits: None,
            created: None,
            published: None,
            updated: None,
            cwes: None,
            cvss_v2_base_score: None,
            cvss_v2_impact_sub_score: None,
            cvss_v2_exploitability_sub_score: None,
            cvss_v2_vector: None,
            cvss_v3_base_score: None,
            cvss_v3_impact_sub_score: None,
            cvss_v3_exploitability_sub_score: None,
            cvss_v3_vector: None,
            owasp_rr_likelihood_score: None,
            owasp_rr_technical_impact_score: None,
            owasp_rr_business_impact_score: None,
            owasp_rr_vector: None,
            severity: None,
            vulnerable_versions: None,
            patched_versions: None,
            epss_score: None,
            epss_percentile: None,
            components: None,
            service_components: None,
            uuid,
            aliases: None,
            finding_attribution: None,
            affected_project_count: None,
            affected_active_project_count: None,
            affected_inactive_project_count: None,
            affected_components: None,
            cwe: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Severity {
    #[serde(rename = "CRITICAL")]
    Critical,
    #[serde(rename = "HIGH")]
    High,
    #[serde(rename = "MEDIUM")]
    Medium,
    #[serde(rename = "LOW")]
    Low,
    #[serde(rename = "INFO")]
    Info,
    #[serde(rename = "UNASSIGNED")]
    Unassigned,
}

impl Default for Severity {
    fn default() -> Severity {
        Self::Critical
    }
}

