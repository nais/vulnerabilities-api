/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnalysisRequest {
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "component")]
    pub component: String,
    #[serde(rename = "vulnerability")]
    pub vulnerability: String,
    #[serde(rename = "analysisState", skip_serializing_if = "Option::is_none")]
    pub analysis_state: Option<AnalysisState>,
    #[serde(rename = "analysisJustification", skip_serializing_if = "Option::is_none")]
    pub analysis_justification: Option<AnalysisJustification>,
    #[serde(rename = "analysisResponse", skip_serializing_if = "Option::is_none")]
    pub analysis_response: Option<AnalysisResponse>,
    #[serde(rename = "analysisDetails", skip_serializing_if = "Option::is_none")]
    pub analysis_details: Option<String>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "suppressed", skip_serializing_if = "Option::is_none")]
    pub suppressed: Option<bool>,
}

impl AnalysisRequest {
    pub fn new(component: String, vulnerability: String) -> AnalysisRequest {
        AnalysisRequest {
            project: None,
            component,
            vulnerability,
            analysis_state: None,
            analysis_justification: None,
            analysis_response: None,
            analysis_details: None,
            comment: None,
            suppressed: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AnalysisState {
    #[serde(rename = "EXPLOITABLE")]
    Exploitable,
    #[serde(rename = "IN_TRIAGE")]
    InTriage,
    #[serde(rename = "FALSE_POSITIVE")]
    FalsePositive,
    #[serde(rename = "NOT_AFFECTED")]
    NotAffected,
    #[serde(rename = "RESOLVED")]
    Resolved,
    #[serde(rename = "NOT_SET")]
    NotSet,
}

impl Default for AnalysisState {
    fn default() -> AnalysisState {
        Self::Exploitable
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AnalysisJustification {
    #[serde(rename = "CODE_NOT_PRESENT")]
    CodeNotPresent,
    #[serde(rename = "CODE_NOT_REACHABLE")]
    CodeNotReachable,
    #[serde(rename = "REQUIRES_CONFIGURATION")]
    RequiresConfiguration,
    #[serde(rename = "REQUIRES_DEPENDENCY")]
    RequiresDependency,
    #[serde(rename = "REQUIRES_ENVIRONMENT")]
    RequiresEnvironment,
    #[serde(rename = "PROTECTED_BY_COMPILER")]
    ProtectedByCompiler,
    #[serde(rename = "PROTECTED_AT_RUNTIME")]
    ProtectedAtRuntime,
    #[serde(rename = "PROTECTED_AT_PERIMETER")]
    ProtectedAtPerimeter,
    #[serde(rename = "PROTECTED_BY_MITIGATING_CONTROL")]
    ProtectedByMitigatingControl,
    #[serde(rename = "NOT_SET")]
    NotSet,
}

impl Default for AnalysisJustification {
    fn default() -> AnalysisJustification {
        Self::CodeNotPresent
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AnalysisResponse {
    #[serde(rename = "CAN_NOT_FIX")]
    CanNotFix,
    #[serde(rename = "WILL_NOT_FIX")]
    WillNotFix,
    #[serde(rename = "UPDATE")]
    Update,
    #[serde(rename = "ROLLBACK")]
    Rollback,
    #[serde(rename = "WORKAROUND_AVAILABLE")]
    WorkaroundAvailable,
    #[serde(rename = "NOT_SET")]
    NotSet,
}

impl Default for AnalysisResponse {
    fn default() -> AnalysisResponse {
        Self::CanNotFix
    }
}

