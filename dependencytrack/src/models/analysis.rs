/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Analysis {
    #[serde(rename = "analysisState")]
    pub analysis_state: AnalysisState,
    #[serde(rename = "analysisJustification")]
    pub analysis_justification: AnalysisJustification,
    #[serde(rename = "analysisResponse")]
    pub analysis_response: AnalysisResponse,
    #[serde(rename = "analysisDetails")]
    pub analysis_details: String,
    #[serde(rename = "analysisComments", skip_serializing_if = "Option::is_none")]
    pub analysis_comments: Option<Vec<models::AnalysisComment>>,
    #[serde(rename = "isSuppressed", skip_serializing_if = "Option::is_none")]
    pub is_suppressed: Option<bool>,
}

impl Analysis {
    pub fn new(analysis_state: AnalysisState, analysis_justification: AnalysisJustification, analysis_response: AnalysisResponse, analysis_details: String) -> Analysis {
        Analysis {
            analysis_state,
            analysis_justification,
            analysis_response,
            analysis_details,
            analysis_comments: None,
            is_suppressed: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AnalysisState {
    #[serde(rename = "EXPLOITABLE")]
    Exploitable,
    #[serde(rename = "IN_TRIAGE")]
    InTriage,
    #[serde(rename = "FALSE_POSITIVE")]
    FalsePositive,
    #[serde(rename = "NOT_AFFECTED")]
    NotAffected,
    #[serde(rename = "RESOLVED")]
    Resolved,
    #[serde(rename = "NOT_SET")]
    NotSet,
}

impl Default for AnalysisState {
    fn default() -> AnalysisState {
        Self::Exploitable
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AnalysisJustification {
    #[serde(rename = "CODE_NOT_PRESENT")]
    CodeNotPresent,
    #[serde(rename = "CODE_NOT_REACHABLE")]
    CodeNotReachable,
    #[serde(rename = "REQUIRES_CONFIGURATION")]
    RequiresConfiguration,
    #[serde(rename = "REQUIRES_DEPENDENCY")]
    RequiresDependency,
    #[serde(rename = "REQUIRES_ENVIRONMENT")]
    RequiresEnvironment,
    #[serde(rename = "PROTECTED_BY_COMPILER")]
    ProtectedByCompiler,
    #[serde(rename = "PROTECTED_AT_RUNTIME")]
    ProtectedAtRuntime,
    #[serde(rename = "PROTECTED_AT_PERIMETER")]
    ProtectedAtPerimeter,
    #[serde(rename = "PROTECTED_BY_MITIGATING_CONTROL")]
    ProtectedByMitigatingControl,
    #[serde(rename = "NOT_SET")]
    NotSet,
}

impl Default for AnalysisJustification {
    fn default() -> AnalysisJustification {
        Self::CodeNotPresent
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AnalysisResponse {
    #[serde(rename = "CAN_NOT_FIX")]
    CanNotFix,
    #[serde(rename = "WILL_NOT_FIX")]
    WillNotFix,
    #[serde(rename = "UPDATE")]
    Update,
    #[serde(rename = "ROLLBACK")]
    Rollback,
    #[serde(rename = "WORKAROUND_AVAILABLE")]
    WorkaroundAvailable,
    #[serde(rename = "NOT_SET")]
    NotSet,
}

impl Default for AnalysisResponse {
    fn default() -> AnalysisResponse {
        Self::CanNotFix
    }
}

