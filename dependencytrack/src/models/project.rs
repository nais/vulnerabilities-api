/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Project {
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<String>,
    #[serde(rename = "publisher", skip_serializing_if = "Option::is_none")]
    pub publisher: Option<String>,
    #[serde(rename = "manufacturer", skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<Box<models::OrganizationalEntity>>,
    #[serde(rename = "supplier", skip_serializing_if = "Option::is_none")]
    pub supplier: Option<Box<models::OrganizationalEntity>>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "classifier", skip_serializing_if = "Option::is_none")]
    pub classifier: Option<Classifier>,
    #[serde(rename = "cpe", skip_serializing_if = "Option::is_none")]
    pub cpe: Option<String>,
    #[serde(rename = "purl", skip_serializing_if = "Option::is_none")]
    pub purl: Option<String>,
    #[serde(rename = "swidTagId", skip_serializing_if = "Option::is_none")]
    pub swid_tag_id: Option<String>,
    #[serde(rename = "directDependencies", skip_serializing_if = "Option::is_none")]
    pub direct_dependencies: Option<String>,
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Box<models::Project>>,
    #[serde(rename = "children", skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<models::Project>>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<models::ProjectProperty>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<models::Tag>>,
    #[serde(rename = "lastBomImport", skip_serializing_if = "Option::is_none")]
    pub last_bom_import: Option<f64>,
    #[serde(rename = "lastBomImportFormat", skip_serializing_if = "Option::is_none")]
    pub last_bom_import_format: Option<String>,
    #[serde(rename = "lastInheritedRiskScore", skip_serializing_if = "Option::is_none")]
    pub last_inherited_risk_score: Option<f64>,
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "externalReferences", skip_serializing_if = "Option::is_none")]
    pub external_references: Option<Vec<models::ExternalReference>>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Box<models::ProjectMetadata>>,
    #[serde(rename = "versions", skip_serializing_if = "Option::is_none")]
    pub versions: Option<Vec<models::ProjectVersion>>,
    #[serde(rename = "metrics", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Box<models::ProjectMetrics>>,
    #[serde(rename = "bomRef", skip_serializing_if = "Option::is_none")]
    pub bom_ref: Option<String>,
}

impl Project {
    pub fn new(uuid: uuid::Uuid) -> Project {
        Project {
            author: None,
            publisher: None,
            manufacturer: None,
            supplier: None,
            group: None,
            name: None,
            description: None,
            version: None,
            classifier: None,
            cpe: None,
            purl: None,
            swid_tag_id: None,
            direct_dependencies: None,
            uuid,
            parent: None,
            children: None,
            properties: None,
            tags: None,
            last_bom_import: None,
            last_bom_import_format: None,
            last_inherited_risk_score: None,
            active: None,
            external_references: None,
            metadata: None,
            versions: None,
            metrics: None,
            bom_ref: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Classifier {
    #[serde(rename = "APPLICATION")]
    Application,
    #[serde(rename = "FRAMEWORK")]
    Framework,
    #[serde(rename = "LIBRARY")]
    Library,
    #[serde(rename = "CONTAINER")]
    Container,
    #[serde(rename = "OPERATING_SYSTEM")]
    OperatingSystem,
    #[serde(rename = "DEVICE")]
    Device,
    #[serde(rename = "FIRMWARE")]
    Firmware,
    #[serde(rename = "FILE")]
    File,
    #[serde(rename = "PLATFORM")]
    Platform,
    #[serde(rename = "DEVICE_DRIVER")]
    DeviceDriver,
    #[serde(rename = "MACHINE_LEARNING_MODEL")]
    MachineLearningModel,
    #[serde(rename = "DATA")]
    Data,
}

impl Default for Classifier {
    fn default() -> Classifier {
        Self::Application
    }
}

