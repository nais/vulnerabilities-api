/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Score {
    #[serde(rename = "likelihoodScore", skip_serializing_if = "Option::is_none")]
    pub likelihood_score: Option<f64>,
    #[serde(rename = "technicalImpactScore", skip_serializing_if = "Option::is_none")]
    pub technical_impact_score: Option<f64>,
    #[serde(rename = "businessImpactScore", skip_serializing_if = "Option::is_none")]
    pub business_impact_score: Option<f64>,
    #[serde(rename = "likelihood", skip_serializing_if = "Option::is_none")]
    pub likelihood: Option<Likelihood>,
    #[serde(rename = "technicalImpact", skip_serializing_if = "Option::is_none")]
    pub technical_impact: Option<TechnicalImpact>,
    #[serde(rename = "businessImpact", skip_serializing_if = "Option::is_none")]
    pub business_impact: Option<BusinessImpact>,
}

impl Score {
    pub fn new() -> Score {
        Score {
            likelihood_score: None,
            technical_impact_score: None,
            business_impact_score: None,
            likelihood: None,
            technical_impact: None,
            business_impact: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Likelihood {
    #[serde(rename = "HIGH")]
    High,
    #[serde(rename = "MEDIUM")]
    Medium,
    #[serde(rename = "LOW")]
    Low,
}

impl Default for Likelihood {
    fn default() -> Likelihood {
        Self::High
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TechnicalImpact {
    #[serde(rename = "HIGH")]
    High,
    #[serde(rename = "MEDIUM")]
    Medium,
    #[serde(rename = "LOW")]
    Low,
}

impl Default for TechnicalImpact {
    fn default() -> TechnicalImpact {
        Self::High
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BusinessImpact {
    #[serde(rename = "HIGH")]
    High,
    #[serde(rename = "MEDIUM")]
    Medium,
    #[serde(rename = "LOW")]
    Low,
}

impl Default for BusinessImpact {
    fn default() -> BusinessImpact {
        Self::High
    }
}

