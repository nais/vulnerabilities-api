/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`export_component_as_cyclone_dx`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportComponentAsCycloneDxError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`export_project_as_cyclone_dx`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportProjectAsCycloneDxError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`is_token_being_processed`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IsTokenBeingProcessedError {
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_bom`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadBomError {
    Status400(models::InvalidBomProblemDetails),
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_bom_base64_encoded`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadBomBase64EncodedError {
    Status400(models::InvalidBomProblemDetails),
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}


/// <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>
pub async fn export_component_as_cyclone_dx(configuration: &configuration::Configuration, uuid: &str, format: Option<&str>) -> Result<String, Error<ExportComponentAsCycloneDxError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/bom/cyclonedx/component/{uuid}", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExportComponentAsCycloneDxError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>
pub async fn export_project_as_cyclone_dx(configuration: &configuration::Configuration, uuid: &str, format: Option<&str>, variant: Option<&str>, download: Option<bool>) -> Result<String, Error<ExportProjectAsCycloneDxError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/bom/cyclonedx/project/{uuid}", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = variant {
        local_var_req_builder = local_var_req_builder.query(&[("variant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = download {
        local_var_req_builder = local_var_req_builder.query(&[("download", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExportProjectAsCycloneDxError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>   This endpoint is intended to be used in conjunction with uploading a supported BOM document.   Upon upload, a token will be returned. The token can then be queried using this endpoint to   determine if any tasks (such as vulnerability analysis) is being performed on the BOM:   <ul>     <li>A value of <code>true</code> indicates processing is occurring.</li>     <li>A value of <code>false</code> indicates that no processing is occurring for the specified token.</li>   </ul>   However, a value of <code>false</code> also does not confirm the token is valid,   only that no processing is associated with the specified token. </p> <p>Requires permission <strong>BOM_UPLOAD</strong></p> <p><strong>Deprecated</strong>. Use <code>/v1/event/token/{uuid}</code> instead.</p>
pub async fn is_token_being_processed(configuration: &configuration::Configuration, uuid: &str) -> Result<models::IsTokenBeingProcessedResponse, Error<IsTokenBeingProcessedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/bom/token/{uuid}", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IsTokenBeingProcessedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>    Expects CycloneDX and a valid project UUID. If a UUID is not specified,    then the <code>projectName</code> and <code>projectVersion</code> must be specified.    Optionally, if <code>autoCreate</code> is specified and <code>true</code> and the project does not exist,    the project will be created. In this scenario, the principal making the request will    additionally need the <strong>PORTFOLIO_MANAGEMENT</strong> or    <strong>PROJECT_CREATION_UPLOAD</strong> permission.  </p>  <p>    The BOM will be validated against the CycloneDX schema. If schema validation fails,    a response with problem details in RFC 9457 format will be returned. In this case,    the response's content type will be <code>application/problem+json</code>.  </p>  <p>Requires permission <strong>BOM_UPLOAD</strong></p>
pub async fn upload_bom(configuration: &configuration::Configuration, project: Option<&str>, auto_create: Option<bool>, project_name: Option<&str>, project_version: Option<&str>, parent_name: Option<&str>, parent_version: Option<&str>, parent_uuid: Option<&str>, bom: Option<&str>) -> Result<models::BomUploadResponse, Error<UploadBomError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/bom", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    if let Some(local_var_param_value) = project {
        local_var_form = local_var_form.text("project", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = auto_create {
        local_var_form = local_var_form.text("autoCreate", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project_name {
        local_var_form = local_var_form.text("projectName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = project_version {
        local_var_form = local_var_form.text("projectVersion", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parent_name {
        local_var_form = local_var_form.text("parentName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parent_version {
        local_var_form = local_var_form.text("parentVersion", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parent_uuid {
        local_var_form = local_var_form.text("parentUUID", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = bom {
        local_var_form = local_var_form.text("bom", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UploadBomError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>   Expects CycloneDX and a valid project UUID. If a UUID is not specified,   then the <code>projectName</code> and <code>projectVersion</code> must be specified.   Optionally, if <code>autoCreate</code> is specified and <code>true</code> and the project does not exist,   the project will be created. In this scenario, the principal making the request will   additionally need the <strong>PORTFOLIO_MANAGEMENT</strong> or   <strong>PROJECT_CREATION_UPLOAD</strong> permission. </p> <p>   The BOM will be validated against the CycloneDX schema. If schema validation fails,   a response with problem details in RFC 9457 format will be returned. In this case,   the response's content type will be <code>application/problem+json</code>. </p> <p>   The maximum allowed length of the <code>bom</code> value is 20'000'000 characters.   When uploading large BOMs, the <code>POST</code> endpoint is preferred,   as it does not have this limit. </p> <p>Requires permission <strong>BOM_UPLOAD</strong></p>
pub async fn upload_bom_base64_encoded(configuration: &configuration::Configuration, body: models::BomSubmitRequest) -> Result<models::BomUploadResponse, Error<UploadBomBase64EncodedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/bom", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UploadBomBase64EncodedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

