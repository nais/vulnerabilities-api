/*
 * Dependency-Track API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.11.7
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`analyze_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AnalyzeProjectError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`export_findings_by_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportFindingsByProjectError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_findings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllFindingsError {
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_findings1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllFindings1Error {
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_findings_by_project`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFindingsByProjectError {
    Status401(),
    Status403(),
    Status404(),
    UnknownValue(serde_json::Value),
}


/// <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>
pub async fn analyze_project(configuration: &configuration::Configuration, uuid: &str) -> Result<models::Project, Error<AnalyzeProjectError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/finding/project/{uuid}/analyze", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AnalyzeProjectError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>
pub async fn export_findings_by_project(configuration: &configuration::Configuration, uuid: &str) -> Result<(), Error<ExportFindingsByProjectError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/finding/project/{uuid}/export", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExportFindingsByProjectError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>
pub async fn get_all_findings(configuration: &configuration::Configuration, show_inactive: Option<bool>, show_suppressed: Option<bool>, severity: Option<&str>, analysis_status: Option<&str>, vendor_response: Option<&str>, publish_date_from: Option<&str>, publish_date_to: Option<&str>, attributed_on_date_from: Option<&str>, attributed_on_date_to: Option<&str>, text_search_field: Option<&str>, text_search_input: Option<&str>, cvssv2_from: Option<&str>, cvssv2_to: Option<&str>, cvssv3_from: Option<&str>, cvssv3_to: Option<&str>) -> Result<Vec<models::Finding>, Error<GetAllFindingsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/finding", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = show_inactive {
        local_var_req_builder = local_var_req_builder.query(&[("showInactive", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = show_suppressed {
        local_var_req_builder = local_var_req_builder.query(&[("showSuppressed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = severity {
        local_var_req_builder = local_var_req_builder.query(&[("severity", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = analysis_status {
        local_var_req_builder = local_var_req_builder.query(&[("analysisStatus", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vendor_response {
        local_var_req_builder = local_var_req_builder.query(&[("vendorResponse", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = publish_date_from {
        local_var_req_builder = local_var_req_builder.query(&[("publishDateFrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = publish_date_to {
        local_var_req_builder = local_var_req_builder.query(&[("publishDateTo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = attributed_on_date_from {
        local_var_req_builder = local_var_req_builder.query(&[("attributedOnDateFrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = attributed_on_date_to {
        local_var_req_builder = local_var_req_builder.query(&[("attributedOnDateTo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = text_search_field {
        local_var_req_builder = local_var_req_builder.query(&[("textSearchField", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = text_search_input {
        local_var_req_builder = local_var_req_builder.query(&[("textSearchInput", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cvssv2_from {
        local_var_req_builder = local_var_req_builder.query(&[("cvssv2From", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cvssv2_to {
        local_var_req_builder = local_var_req_builder.query(&[("cvssv2To", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cvssv3_from {
        local_var_req_builder = local_var_req_builder.query(&[("cvssv3From", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cvssv3_to {
        local_var_req_builder = local_var_req_builder.query(&[("cvssv3To", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllFindingsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>
pub async fn get_all_findings1(configuration: &configuration::Configuration, show_inactive: Option<bool>, severity: Option<&str>, publish_date_from: Option<&str>, publish_date_to: Option<&str>, text_search_field: Option<&str>, text_search_input: Option<&str>, cvssv2_from: Option<&str>, cvssv2_to: Option<&str>, cvssv3_from: Option<&str>, cvssv3_to: Option<&str>, occurrences_from: Option<&str>, occurrences_to: Option<&str>) -> Result<Vec<models::GroupedFinding>, Error<GetAllFindings1Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/finding/grouped", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = show_inactive {
        local_var_req_builder = local_var_req_builder.query(&[("showInactive", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = severity {
        local_var_req_builder = local_var_req_builder.query(&[("severity", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = publish_date_from {
        local_var_req_builder = local_var_req_builder.query(&[("publishDateFrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = publish_date_to {
        local_var_req_builder = local_var_req_builder.query(&[("publishDateTo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = text_search_field {
        local_var_req_builder = local_var_req_builder.query(&[("textSearchField", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = text_search_input {
        local_var_req_builder = local_var_req_builder.query(&[("textSearchInput", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cvssv2_from {
        local_var_req_builder = local_var_req_builder.query(&[("cvssv2From", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cvssv2_to {
        local_var_req_builder = local_var_req_builder.query(&[("cvssv2To", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cvssv3_from {
        local_var_req_builder = local_var_req_builder.query(&[("cvssv3From", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cvssv3_to {
        local_var_req_builder = local_var_req_builder.query(&[("cvssv3To", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occurrences_from {
        local_var_req_builder = local_var_req_builder.query(&[("occurrencesFrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occurrences_to {
        local_var_req_builder = local_var_req_builder.query(&[("occurrencesTo", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAllFindings1Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>
pub async fn get_findings_by_project(configuration: &configuration::Configuration, uuid: &str, suppressed: Option<bool>, source: Option<&str>, accept: Option<&str>) -> Result<Vec<models::Finding>, Error<GetFindingsByProjectError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/finding/project/{uuid}", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = suppressed {
        local_var_req_builder = local_var_req_builder.query(&[("suppressed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = accept {
        local_var_req_builder = local_var_req_builder.header("accept", local_var_param_value.to_string());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("X-Api-Key", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetFindingsByProjectError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

